openapi: 3.0.0
info:
  title: Service-Kommune Tracking API
  version: 1.0-SNAPSHOT
  description: >-
    This document describes the Service-Kommune Tracking API.
    A service useful for tracking various events in Service-BW processes and to generate various reports about these events.
    <br><br>
    **Authentication & Authorization**
    <br>
    Most calls that return statistical data require authentication and authorization.
    To create a new account, a server admin (TODO - fill contact data for Konstanz) needs to add a new entry
    into the `users` table. (The `username` is the requested name to log in, the `bcryptPassword` can be generated by
    performing a [bcrypt hash](https://8gwifi.org/bccrypt.jsp).)
    To authorize a user, a server admin needs to add a new entry into the `permissions` table.
  contact:
    name: "Service-Kommune"
    url: "https://www.service-kommune.de/"
    email: "info@service-kommune.de"
servers:
  - url: "http://127.0.0.1:5050"
    description: "Local development environment"
components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
  responses:
    BadRequest:
      description: "Required parameters are missing or not in correct format"
    AuthenticationFailed:
      description: "`Authorization` header not provided, username wrong or password wrong"
    AuthorizationFailed:
      description: "User is not authorized to access this `processId`"
  parameters:
    processId:
      name: processId
      in: path
      required: true
      description: >
        Unique identifier for a process.
        Can be chosen freely, but should be the same for the same process.
      schema:
        type: string
      example: karlsruhe-mietpreisrechner
    eventId:
      name: eventId
      in: path
      required: true
      description: >
        Unique identifier for a step in a model.
        Can be chosen freely, but should be the same for the same process.
      schema:
        type: string
      example: before-filling-form
    processInstanceId:
      name: processInstanceId
      in: query
      required: true
      description: >
        Unique identifier for a concrete process instance.
        Can be read from the process instance variable `processInstanceId`<br>
        **WARNING:** People with access to the system database might be able to
        get personal identifiable information from that.
        You need to ensure that this doesn't happen, or include that fact in your privacy statement
      schema:
        type: integer
      example: 15460988
    userId:
      name: userId
      in: query
      required: false
      description: >
        Unique identifier for a user, to allow tracking across different process instances.
        Can be read from the process instance variable `startedBy`<br>
        **WARNING:** People with access to the admin center will be able to get the e-mail address
        for a given userId.
        As you most likely cannot prevent that you should consider not providing that parameter
        for data privacy reasons.
      schema:
        type: string
      examples:
        With a user ID:
          value: "userId:123"
        With a session ID:
          value: "sessionId:456"
    timeFrom:
      name: timeFrom
      in: query
      required: false
      description: >
        A UNIX timestamp marking the point in time when events are included in the result (inclusive).
        If missing, all events are included (as long as they are not filtered by another parameter)
      schema:
        type: integer
        minimum: 0
        maximum: 2147483647
    timeUntil:
      name: timeUntil
      in: query
      required: false
      description: >
        A UNIX timestamp marking the point in time when events are no longer included in the result.
        If missing, all events are included (as long as they are not filtered by another parameter)
      schema:
        type: integer
        minimum: 0
        maximum: 2147483647
security:
  - BasicAuth: []
paths:
  "/api/v1.0":
    get:
      summary: Get Documentation
      security: []
      responses:
        200:
          description: Get the documentation you are reading right now, as a HTML file with embedded Swagger UI rendering
          content:
            text/html:
              example: <some HTML/>
  "/api/v1.0/processes/{processId}/events/{eventId}":
    post:
      summary: Track an event
      security: [] # None required!
      parameters:
        - $ref: '#/components/parameters/processId'
        - $ref: '#/components/parameters/eventId'
        - $ref: '#/components/parameters/processInstanceId'
        - $ref: '#/components/parameters/userId'
      responses:
        201:
          description: "The event was successfully added to the database"
        400:
          $ref: '#/components/responses/BadRequest'
  "/api/v1.0/processes/{processId}/events/{eventId}/sum":
    get:
      summary: Get sum of tracked events for given event
      parameters:
        - $ref: '#/components/parameters/processId'
        - $ref: '#/components/parameters/eventId'
        - $ref: '#/components/parameters/timeFrom'
        - $ref: '#/components/parameters/timeUntil'
      responses:
        200:
          description: "Event found, but possibly 0 tracks"
          content:
            application/json:
              schema:
                type: integer
                minimum: 0
                example: 5
        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/AuthenticationFailed'
        403:
          $ref: '#/components/responses/AuthorizationFailed'
  "/api/v1.0/processes/{processId}/sum":
    get:
      summary: Get sum of all events for given process
      parameters:
        - $ref: '#/components/parameters/processId'
        - $ref: '#/components/parameters/timeFrom'
        - $ref: '#/components/parameters/timeUntil'
      responses:
        200:
          description: All tracked events and how often that event was tracled
          content:
            application/json:
              schema:
                type: object
                properties:
                  eventId:
                    type: string
                  count:
                    type: integer
                required:
                  - eventId
                  - count
                example:
                  before-filling-form: 521
                  after-filling-form: 140

        400:
          $ref: '#/components/responses/BadRequest'
        401:
          $ref: '#/components/responses/AuthenticationFailed'
        403:
          $ref: '#/components/responses/AuthorizationFailed'

# TODO: GET /api/v1.0/processes/{processId}
